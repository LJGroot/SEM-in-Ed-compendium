library(bookdown)
bookdown::render_book()
bookdown::render_book("index.Rmd", "01-ReviewRegression.Rmd")
setwd("~/")
setwd("~/SEM-Compendium")
bookdown::render_book("index.Rmd", "01-ReviewRegression.Rmd")
bookdown::render_book()
library(tinytex)
setwd("~/SEM-Compendium")
library(bookdown)
library(rmarkdown)
library(tinytex)
setwd("~/SEM-Compendium")
setwd("~/SEM-Compendium")
getwd()
setwd("~/R/SEM-Compendium")
unlink("index_cache", recursive = TRUE)
?Rprofile
1L
2L
?tikz
?tikzDevice
library(lavaan)
dd <- read.table(file = "http://www.statmodel.com/examples/shortform/4cat%20m.dat",
col.names = c("intention", "intervention", "ciguse", "w"))
dd$intention <- dd$intention - 1L # make the lowest category 0, not 1
## transform frequency table to casewise data
myData <- do.call(rbind, lapply(1:nrow(dd), function(RR) {
data.frame(rep(1, dd$w[RR]) %*% as.matrix(dd[RR, 1:3]))
}))
myData[sample(nrow(myData), size = 5), ]
## table for each variable
lapply(myData, table)
tab3way <- table(myData)
probs <- prop.table(tab3way, 1:2)[,,2]
addmargins(probs, FUN = mean)
mod.lin <- lm(ciguse ~ intervention + intention, data = myData)
coef(mod.lin)
summary(fitted(mod.lin))
mod.logit <- glm(ciguse ~ intervention + intention, data = myData,
family = binomial("logit"))
coef(mod.logit)
mod.probit <- glm(ciguse ~ intervention + intention, data = myData,
family = binomial("probit"))
coef(mod.probit)
predProbs <- dd[dd$ciguse == 1, 1:2]
predProbs$p.obs <- mapply(function(RR, CC) {
probs[rownames(probs) == RR, colnames(probs) == CC] },
RR = predProbs$intention, CC = predProbs$intervention)
predProbs$p.linear <- predict(mod.lin, newdata = predProbs)
predProbs$p.logit  <- predict(mod.logit, newdata = predProbs, type = "response")
predProbs$p.probit <- predict(mod.probit, newdata = predProbs, type = "response")
predProbs
## calculate Pearson's chi-squared (lowest wins)
sapply(c("p.linear","p.logit","p.probit"), function(expected) {
sum( (predProbs$p.obs - predProbs[[expected]])^2 / predProbs[[expected]] )
})
sapply(list(linear = mod.lin, logit = mod.logit, probit = mod.probit),
function(mod) {
dat <- myData
dat$probs <- fitted(mod)
diff(aggregate(probs ~ ciguse, data = dat, FUN = mean)$probs)
})
mod0 <- glm(ciguse ~ 1, data = myData, family = binomial("probit"))
coef(mod0)
mod0.ciguse <- 'ciguse | t1' # specify first (and only) threshold
fit0.ciguse <- sem(mod0.ciguse, data = myData)
summary(fit0.ciguse, header = FALSE, nd = 7)
opar <- par(mfrow = 1:2, mar = c(4, 1, 1, 1))
## Fixed intercept, estimated threshold
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-4, 4), ylim = c(0, .5), lwd = 2,
xlab = "Propensity to Smoke", yaxt = 'n')
xx <- c(-4, seq(-4, coef(fit0.ciguse), by = .01), coef(fit0.ciguse))
polygon(x = xx, y = c(0, dnorm(xx[-c(1, length(xx))], mean = 0, sd = 1), 0),
col = "grey77")
abline(v = coef(fit0.ciguse), lwd = 2)
abline(v = 0, lwd = 2, col = "blue", lty = "dotted")
legtext <- c("Latent M = 0", paste("Threshold =", round(coef(fit0.ciguse), 3)))
legend("topleft", legend = legtext, col = c("blue","black"),
lty = c("dotted","solid"), lwd = 2, cex = 1.2, bg = "white")
## Fixed threshold, estimated intercept
curve(dnorm(x, mean = coef(mod0), sd = 1), xlim = c(-4, 4) + coef(mod0),
ylim = c(0, .5), lwd = 2, xlab = "Propensity to Smoke", yaxt = 'n')
xx <- c(-4 + coef(mod0), seq(-4 + coef(mod0), 0, by = .01), 0)
polygon(x = xx, y = c(0, dnorm(xx[-c(1, length(xx))],
mean = coef(mod0), sd = 1), 0),
col = "grey77")
abline(v = 0, lwd = 2)
abline(v = coef(mod0), lwd = 2, col = "blue", lty = "dotted")
legtext <- c(paste0("Latent M = ", round(coef(mod0), 3)), "Threshold = 0")
legend("topleft", legend = legtext, col = c("blue","black"),
lty = c("dotted","solid"), lwd = 2, cex = 1.2, bg = "white")
par(opar)
fit2 <- sem('ciguse ~~ intention', data = myData, ordered = TRUE)
summary(fit2, header = FALSE, standardized = TRUE)
opar <- par(mfrow = c(1,1), mar = c(4, 1, 1, 1))
## Fixed intercept, estimated threshold
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-4, 4), ylim = c(0, .5), lwd = 2,
xlab = "(Latent) Intent to Smoke", yaxt = 'n')
x1 <- c(coef(fit2)[3], seq(coef(fit2)[3], coef(fit2)[4], by = .01), coef(fit2)[4])
x2 <- c(coef(fit2)[4], seq(coef(fit2)[4], coef(fit2)[5], by = .01), coef(fit2)[5])
x3 <- c(coef(fit2)[5], seq(coef(fit2)[5], 4, by = .01), 4)
polygon(x = x1, y = c(0, dnorm(x1[-c(1, length(x1))]), 0), col = "grey88")
polygon(x = x2, y = c(0, dnorm(x2[-c(1, length(x2))]), 0), col = "grey69")
polygon(x = x3, y = c(0, dnorm(x3[-c(1, length(x3))]), 0), col = "grey42")
abline(v = coef(fit2)[3:5], lwd = 2, lty = "dotted")
text(x = c(coef(fit2)[3], coef(fit2)[3], coef(fit2)[5], coef(fit2)[5]),
y = .45, pos = c(2, 4, 2, 4), #cex = 2,
labels = 0:3)
par(opar)
p.intent <- prop.table(table(myData$intention)) # proportions per category
cumsum(p.intent) # cumulative proportions (up to and including each category)
qnorm(c(0, cumsum(p.intent)))
lavInspect(fit2, "sampstat")
mod.part <- ' ## regression paths
intention ~ b21*intervention
ciguse ~ b31*intervention + b32*intention
## define indirect and total effects
ind := b21*b32
tot := ind + b31
'
fit.part <- sem(mod.part, data = myData, ordered = TRUE)
summary(fit.part, standardized = TRUE, rsquare = TRUE)
mod.full <- ' ## regression paths
intention ~ b21*intervention
ciguse ~ b32*intention
## define indirect and total effects
ind := b21*b32
'
fit.full <- sem(mod.full, data = myData, ordered = TRUE)
lavTestLRT(fit.full, fit.part) # or anova(), which then calls lavTestLRT()
PT1 <- parameterEstimates(fit.part, standardized = TRUE)
ind <- PT1[PT1$label == "ind",]
direct <- PT1[PT1$label == "b31",]
PT1[PT1$op==":=",]
PT1 <- parameterEstimates(fit.part, standardized = TRUE, output="pretty")
PT1[PT1$op==":=",]
fitmeasures(fit.part, output = "pretty")
knitr::include_graphics("images/Ch7_Path_Model_Identification.png")
preview_chapter(07-Identification.Rmd)
library(bookdown)
preview_chapter(07-Identification)
preview_chapter(07-Identification.Rmd)
preview_chapter(/07-Identification.Rmd)
getwd()
preview_chapter(Users/ljgroot/OneDrive - UvA/Documenten/R/SEM-Compendium/07-Identification.Rmd)
preview_chapter(users/ljgroot/OneDrive - UvA/Documenten/R/SEM-Compendium/07-Identification.Rmd)
knitr::include_graphics("images/Ch8_simple_autoregression_model.png")
